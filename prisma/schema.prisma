// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  ADMIN
  USER
}

enum PaymentsStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  ESEWA
  KHALTI
  CASH_ON_DELIVERY
}

enum InteractionType {
  VIEW
  CART
  PURCHASE
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id        String    @id @default(uuid())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  image     String?
  phone     String?
  address   String?
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  products  Product[]

  Order Order[]

  UserInteractedCategory UserInteractedCategory[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products Product[] @relation("ProductCategories")

  UserInteractedCategory UserInteractedCategory[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal   @db.Decimal(10, 2)
  image       String?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  categories Category[] @relation("ProductCategories")

  OrderItems OrderItems[]
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  totalAmount Decimal      @db.Decimal(10, 2)
  destination String?
  orderItems  OrderItems[]
  status      OrderStatus @default(PENDING)
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  deletedAt   DateTime?

  Payments Payments[]
}

model OrderItems {
  id        String    @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  unitPrice Decimal   @db.Decimal(10, 2)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Payments {
  id            String         @id @default(uuid())
  order         Order          @relation(fields: [orderId], references: [id])
  orderId       String
  amount        Decimal        @db.Decimal(10, 2)
  paymentDate   DateTime?      @default(now())
  paymentMethod PaymentMethod
  status        PaymentsStatus
  transactionId String?        @unique
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  deletedAt     DateTime?
}

model UserInteractedCategory {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  category         Category        @relation(fields: [categoryId], references: [id])
  categoryId       String
  interactionType  InteractionType
  interactionCount Int             @default(1)
  lastInteractedAt DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@unique([userId, categoryId, interactionType])
}
